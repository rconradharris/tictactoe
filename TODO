- GameTree optimization
    - We currently rebuild the game tree for each move, this is wasteful since it doesn't change
    - When the move is played, create a new GameTree with the root at the chosen move's node
    - remove size and scored attributes from tree, hard to keep in sync if we mutate the tree [DONE]
    - add move applied listener so engine knows when a move was made and can update GameTree accordingly [DONE]

    - generate game tree once
    - when a move is applied, update game tree

    - battle5
        current: 0m48.041s
- Add at3.format()
    - Write game parameters and moves
    - User can add additional metdata by editing the file
- Add interactive command to write at3 file
- better promising move heuristics
- refutation tables
- killer move?

IDEAS
=====
- 3D tic-tac-toe

DONE
====

- Use uv [DONE]
- Use mypy typechecking [DONE]
- Create board and game model [DONE]
- Save move history [DONE]
- Define PGN equivalent for tic-tac-toe [DONE]
    - algebraic tic-tac-toe: at3 [DONE]
- Rewrite tests using this format [DONE]
- Successfully play tic tac toe [DONE]
- Support m,n,k games
    - win_count [DONE]
    - remove square requirement on board [DONE]
- Rename mark to piece [DONE]
- Support connect four [DONE]
    - 7,6,4
    - fix diagonal checks for arbitrary size boards [DONE]
    - placement rule to at3 [DONE]
    - add placement rule to board [DONE]
    - enforce piece placement rules [DONE]
- Add Game enum to AT3 as shorthand for 7,6,4:column stack [DONE]
- Infer game choice from extension, if possible [DONE]
    - .ttt -> TIC_TAC_TOE [DONE]
    - .c4 -> CONNECT_FOUR [DONE]
- Replace Cat Game with Draw since connect four is supported [DONE]
- Add Board.reset(), call in Game.reset() [DONE]
- Improve win scanning [DONE]
- Add 'dummy' engine that plays random moves [DONE]
- alpha-beta pruning [DONE]
